{"version":3,"sources":["app/layout/NavBar.jsx","app/layout/Home.jsx","app/layout/OrdersList.jsx","app/layout/App.jsx","serviceWorker.js","index.js"],"names":["NavBar","Menu","Item","as","NavLink","to","Component","Home","Container","text","style","backgroundColor","Header","OrdersList","props","state","ordersRequest","options","method","url","axios","axiosResponse","this","setState","Table","celled","padded","Row","HeaderCell","singleLine","Body","Cell","textAlign","Rating","icon","defaultRating","maxRating","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAgBeA,E,uKATP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,CAAWC,GAAIC,IAASC,GAAG,KAA3B,QACA,kBAACJ,EAAA,EAAKC,KAAN,CAAWC,GAAIC,IAASC,GAAG,WAA3B,e,GANKC,a,SCYNC,E,uKAXP,OACI,kBAACC,EAAA,EAAD,CAAWC,MAAI,EAACC,MAAO,CAACC,gBAAiB,UACrC,kBAACC,EAAA,EAAD,CAAQT,GAAG,MAAX,YACA,uF,GALGG,a,8DCwFJO,E,kDArFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,cAAe,IAHJ,E,yLASXC,EAAU,CACVC,OAAQ,MACRC,IAAK,gC,SAGiBC,IAAMH,G,OAA5BI,E,OACJC,KAAKC,SAAS,CACVP,cAAeK,I,qIAId,IAEEL,EAAiBM,KAAKP,MAAtBC,cAEP,OACI,kBAACR,EAAA,EAAD,KACKQ,EACC,kBAACQ,EAAA,EAAD,CAAOC,QAAM,EAACC,QAAM,GAClB,kBAACF,EAAA,EAAMZ,OAAP,KACA,kBAACY,EAAA,EAAMG,IAAP,KACI,kBAACH,EAAA,EAAMI,WAAP,CAAkBC,YAAU,GAA5B,OACA,kBAACL,EAAA,EAAMI,WAAP,iBACA,kBAACJ,EAAA,EAAMI,WAAP,eACA,kBAACJ,EAAA,EAAMI,WAAP,uBACA,kBAACJ,EAAA,EAAMI,WAAP,oBAIJ,kBAACJ,EAAA,EAAMM,KAAP,KACA,kBAACN,EAAA,EAAMG,IAAP,KACI,kBAACH,EAAA,EAAMO,KAAP,KACA,kBAACnB,EAAA,EAAD,CAAQT,GAAG,KAAK6B,UAAU,UAA1B,MAIA,kBAACR,EAAA,EAAMO,KAAP,CAAYF,YAAU,GAAtB,gBACA,kBAACL,EAAA,EAAMO,KAAP,KACA,kBAACE,EAAA,EAAD,CAAQC,KAAK,OAAOC,cAAe,EAAGC,UAAW,KAEjD,kBAACZ,EAAA,EAAMO,KAAP,CAAYC,UAAU,SAAtB,OACI,8BAGJ,kBAACR,EAAA,EAAMO,KAAP,8KAMJ,kBAACP,EAAA,EAAMG,IAAP,KACI,kBAACH,EAAA,EAAMO,KAAP,KACA,kBAACnB,EAAA,EAAD,CAAQT,GAAG,KAAK6B,UAAU,UAA1B,MAIA,kBAACR,EAAA,EAAMO,KAAP,CAAYF,YAAU,GAAtB,UACA,kBAACL,EAAA,EAAMO,KAAP,KACA,kBAACE,EAAA,EAAD,CAAQC,KAAK,OAAOC,cAAe,EAAGC,UAAW,KAEjD,kBAACZ,EAAA,EAAMO,KAAP,CAAYC,UAAU,SAAtB,QACK,8BAGL,kBAACR,EAAA,EAAMO,KAAP,gI,GA3ECzB,aCiBV+B,E,uKAZP,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC7B,EAAA,EAAD,CAAW8B,UAAU,QACjB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjC,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,UAAUC,UAAW5B,U,GAPzCP,aCKEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a182d75.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { NavLink } from 'react-router-dom';\n\nclass NavBar extends Component{\n\n    render(){\n        return (\n            <Menu>\n                <Menu.Item as={NavLink} to='/'>Home</Menu.Item>\n                <Menu.Item as={NavLink} to='/orders'>Orders</Menu.Item>\n            </Menu>\n        );\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\n\nclass Home extends Component{\n    render(){\n        return (\n            <Container text style={{backgroundColor: 'white'}}>\n                <Header as='h2'>Welcome!</Header>\n                <p>\n                    To see the orders list, go to the Orders section...\n                </p>\n            </Container>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Container, Header, Table, Rating } from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass OrdersList extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ordersRequest: {}\n        };\n    }\n\n    async componentDidMount(){\n\n        let options = {\n            method: 'GET',\n            url: 'http://localhost:3001/orders'\n        }\n    \n        let axiosResponse = await axios(options);\n        this.setState({\n            ordersRequest: axiosResponse\n        })\n    }\n\n    render(){\n\n        const {ordersRequest} = this.state;\n\n        return (\n            <Container>\n                {ordersRequest}\n                  <Table celled padded>\n                    <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell singleLine>Id </Table.HeaderCell>\n                        <Table.HeaderCell>Customer</Table.HeaderCell>\n                        <Table.HeaderCell>Amount</Table.HeaderCell>\n                        <Table.HeaderCell>Payment method</Table.HeaderCell>\n                        <Table.HeaderCell>Reference</Table.HeaderCell>\n                    </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>\n                        <Header as='h2' textAlign='center'>\n                            A\n                        </Header>\n                        </Table.Cell>\n                        <Table.Cell singleLine>Power Output</Table.Cell>\n                        <Table.Cell>\n                        <Rating icon='star' defaultRating={3} maxRating={3} />\n                        </Table.Cell>\n                        <Table.Cell textAlign='right'>\n                        80% <br />\n                        \n                        </Table.Cell>\n                        <Table.Cell>\n                        Creatine supplementation is the reference compound for increasing\n                        muscular creatine levels; there is variability in this increase,\n                        however, with some nonresponders.\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>\n                        <Header as='h2' textAlign='center'>\n                            A\n                        </Header>\n                        </Table.Cell>\n                        <Table.Cell singleLine>Weight</Table.Cell>\n                        <Table.Cell>\n                        <Rating icon='star' defaultRating={3} maxRating={3} />\n                        </Table.Cell>\n                        <Table.Cell textAlign='right'>\n                        100% <br />\n                        \n                        </Table.Cell>\n                        <Table.Cell>\n                        Creatine is the reference compound for power improvement, with numbers\n                        from one meta-analysis to assess potency\n                        </Table.Cell>\n                    </Table.Row>\n                    </Table.Body>\n                </Table>\n            </Container>\n        );\n    }\n}\n\nexport default OrdersList;","import React, { Component, Fragment } from 'react';\nimport { Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport Home from './Home';\nimport OrdersList from './OrdersList';\n\nclass App extends Component {\n    render(){\n        return (\n            <Fragment>\n                <NavBar />\n                <Container className='main'>\n                    <Route exact path='/' component={Home}/>\n                    <Route exact path='/orders' component={OrdersList}/>\n                </Container>\n            </Fragment>\n        );\n    }\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-less/semantic.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}